/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common';

export declare namespace Sale {
  export type ItemStruct = {
    price: BigNumberish;
    maxPurchaseAmount: BigNumberish;
  };

  export type ItemStructOutput = [price: bigint, maxPurchaseAmount: bigint] & {
    price: bigint;
    maxPurchaseAmount: bigint;
  };
}

export interface SaleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'addItem'
      | 'getItem'
      | 'getUserPurchases'
      | 'owner'
      | 'purchase'
      | 'removeItem'
      | 'renounceOwnership'
      | 'token'
      | 'transferOwnership'
      | 'updateItem'
      | 'withdraw',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'ItemAdded'
      | 'ItemRemoved'
      | 'ItemUpdated'
      | 'OwnershipTransferred'
      | 'Purchased',
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'addItem',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getItem',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserPurchases',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'purchase',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeItem',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateItem',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [AddressLike],
  ): string;

  decodeFunctionResult(functionFragment: 'addItem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getItem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getUserPurchases',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeItem', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'updateItem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
}

export namespace ItemAddedEvent {
  export type InputTuple = [
    itemId: BigNumberish,
    price: BigNumberish,
    maxPurchaseAmount: BigNumberish,
  ];
  export type OutputTuple = [
    itemId: bigint,
    price: bigint,
    maxPurchaseAmount: bigint,
  ];
  export interface OutputObject {
    itemId: bigint;
    price: bigint;
    maxPurchaseAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemRemovedEvent {
  export type InputTuple = [itemId: BigNumberish];
  export type OutputTuple = [itemId: bigint];
  export interface OutputObject {
    itemId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemUpdatedEvent {
  export type InputTuple = [
    itemId: BigNumberish,
    price: BigNumberish,
    maxPurchaseAmount: BigNumberish,
  ];
  export type OutputTuple = [
    itemId: bigint,
    price: bigint,
    maxPurchaseAmount: bigint,
  ];
  export interface OutputObject {
    itemId: bigint;
    price: bigint;
    maxPurchaseAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PurchasedEvent {
  export type InputTuple = [
    user: AddressLike,
    itemId: BigNumberish,
    amount: BigNumberish,
  ];
  export type OutputTuple = [user: string, itemId: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    itemId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Sale extends BaseContract {
  connect(runner?: ContractRunner | null): Sale;
  waitForDeployment(): Promise<this>;

  interface: SaleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  addItem: TypedContractMethod<
    [price: BigNumberish, maxPurchaseAmount: BigNumberish],
    [void],
    'nonpayable'
  >;

  getItem: TypedContractMethod<
    [itemId: BigNumberish],
    [Sale.ItemStructOutput],
    'view'
  >;

  getUserPurchases: TypedContractMethod<
    [user: AddressLike, itemId: BigNumberish],
    [bigint],
    'view'
  >;

  owner: TypedContractMethod<[], [string], 'view'>;

  purchase: TypedContractMethod<
    [itemId: BigNumberish, amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  removeItem: TypedContractMethod<[itemId: BigNumberish], [void], 'nonpayable'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  token: TypedContractMethod<[], [string], 'view'>;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  updateItem: TypedContractMethod<
    [
      itemId: BigNumberish,
      price: BigNumberish,
      maxPurchaseAmount: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;

  withdraw: TypedContractMethod<[to: AddressLike], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'addItem',
  ): TypedContractMethod<
    [price: BigNumberish, maxPurchaseAmount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'getItem',
  ): TypedContractMethod<
    [itemId: BigNumberish],
    [Sale.ItemStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'getUserPurchases',
  ): TypedContractMethod<
    [user: AddressLike, itemId: BigNumberish],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'owner',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'purchase',
  ): TypedContractMethod<
    [itemId: BigNumberish, amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'removeItem',
  ): TypedContractMethod<[itemId: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'renounceOwnership',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'token',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'transferOwnership',
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'updateItem',
  ): TypedContractMethod<
    [
      itemId: BigNumberish,
      price: BigNumberish,
      maxPurchaseAmount: BigNumberish,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'withdraw',
  ): TypedContractMethod<[to: AddressLike], [void], 'nonpayable'>;

  getEvent(
    key: 'ItemAdded',
  ): TypedContractEvent<
    ItemAddedEvent.InputTuple,
    ItemAddedEvent.OutputTuple,
    ItemAddedEvent.OutputObject
  >;
  getEvent(
    key: 'ItemRemoved',
  ): TypedContractEvent<
    ItemRemovedEvent.InputTuple,
    ItemRemovedEvent.OutputTuple,
    ItemRemovedEvent.OutputObject
  >;
  getEvent(
    key: 'ItemUpdated',
  ): TypedContractEvent<
    ItemUpdatedEvent.InputTuple,
    ItemUpdatedEvent.OutputTuple,
    ItemUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'Purchased',
  ): TypedContractEvent<
    PurchasedEvent.InputTuple,
    PurchasedEvent.OutputTuple,
    PurchasedEvent.OutputObject
  >;

  filters: {
    'ItemAdded(uint256,uint224,uint32)': TypedContractEvent<
      ItemAddedEvent.InputTuple,
      ItemAddedEvent.OutputTuple,
      ItemAddedEvent.OutputObject
    >;
    ItemAdded: TypedContractEvent<
      ItemAddedEvent.InputTuple,
      ItemAddedEvent.OutputTuple,
      ItemAddedEvent.OutputObject
    >;

    'ItemRemoved(uint256)': TypedContractEvent<
      ItemRemovedEvent.InputTuple,
      ItemRemovedEvent.OutputTuple,
      ItemRemovedEvent.OutputObject
    >;
    ItemRemoved: TypedContractEvent<
      ItemRemovedEvent.InputTuple,
      ItemRemovedEvent.OutputTuple,
      ItemRemovedEvent.OutputObject
    >;

    'ItemUpdated(uint256,uint224,uint32)': TypedContractEvent<
      ItemUpdatedEvent.InputTuple,
      ItemUpdatedEvent.OutputTuple,
      ItemUpdatedEvent.OutputObject
    >;
    ItemUpdated: TypedContractEvent<
      ItemUpdatedEvent.InputTuple,
      ItemUpdatedEvent.OutputTuple,
      ItemUpdatedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'Purchased(address,uint256,uint32)': TypedContractEvent<
      PurchasedEvent.InputTuple,
      PurchasedEvent.OutputTuple,
      PurchasedEvent.OutputObject
    >;
    Purchased: TypedContractEvent<
      PurchasedEvent.InputTuple,
      PurchasedEvent.OutputTuple,
      PurchasedEvent.OutputObject
    >;
  };
}
